#include "VirtualTimerManager.h"void VirtualTimerManager::onTick()  {  for (int i = 0; i < timerCount; ++i) {    timers[i].tick();  }}VirtualTimerManager::VirtualTimerManager(TIM_HandleTypeDef &hw_timer,                                         IRQn_Type irq, uint32_t tick_frequency)    : BaseTimer(hw_timer, irq, tick_frequency), timerCount(0) {}int VirtualTimerManager::addTimer(uint32_t duration, bool cyclic, void (*callback)()) {  if (timerCount >= MAX_TIMERS) return -1;  timers[timerCount].start(duration, cyclic, callback);  return timerCount++;}void VirtualTimerManager::stopTimer(int id) {  if (id >= 0 && id < timerCount) {    timers[id].stop();  }}